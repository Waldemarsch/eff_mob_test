package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"
	"eff_mob_test/graph/model"
	main_models "eff_mob_test/models"
	"eff_mob_test/pkg/repository"
	"encoding/json"
	"fmt"
	"github.com/redis/go-redis/v9"
	"log"
	"os"
	"time"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (int, error) {
	db, err := repository.NewPostgresDB(repository.Config{
		Host:     os.Getenv("DB_HOST"),
		Port:     os.Getenv("DB_PORT"),
		Username: os.Getenv("DB_USERNAME"),
		Password: os.Getenv("DB_PASSWORD"),
		DBName:   os.Getenv("DB_NAME"),
		SSLMode:  os.Getenv("DB_SSLMODE"),
	})

	if err != nil {
		log.Fatal(err)
	}

	result := db.Table("users").Create(&input)

	err = result.Error

	if err != nil {
		return 0, err
	}

	redisClient := redis.NewClient(GetRedisConfig())

	status := redisClient.Set(ctx, fmt.Sprintf("%d", input.ID), input, time.Minute*10)

	_, err = status.Result()

	if err != nil {
		return 0, err
	}

	return *input.ID, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, input int) (int, error) {
	db, err := repository.NewPostgresDB(repository.Config{
		Host:     os.Getenv("DB_HOST"),
		Port:     os.Getenv("DB_PORT"),
		Username: os.Getenv("DB_USERNAME"),
		Password: os.Getenv("DB_PASSWORD"),
		DBName:   os.Getenv("DB_NAME"),
		SSLMode:  os.Getenv("DB_SSLMODE"),
	})

	if err != nil {
		log.Fatal(err)
	}

	err = db.Delete(&main_models.User{ID: input}).Error

	if err != nil {
		return 0, err
	}

	redisClient := redis.NewClient(GetRedisConfig())

	status := redisClient.Del(ctx, fmt.Sprintf("%d", input))

	_, err = status.Result()

	if err != nil {
		return 0, err
	}

	return input, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int, params model.UserFilter) (*model.User, error) {
	db, err := repository.NewPostgresDB(repository.Config{
		Host:     os.Getenv("DB_HOST"),
		Port:     os.Getenv("DB_PORT"),
		Username: os.Getenv("DB_USERNAME"),
		Password: os.Getenv("DB_PASSWORD"),
		DBName:   os.Getenv("DB_NAME"),
		SSLMode:  os.Getenv("DB_SSLMODE"),
	})

	if err != nil {
		log.Fatal(err)
	}

	user := model.User{ID: id}

	db.First(&user)

	paramsJSON, err := json.Marshal(params)

	if err != nil {
		return nil, err
	}

	err = json.Unmarshal(paramsJSON, &user)

	if err != nil {
		return nil, err
	}

	db.Save(&user)

	redisClient := redis.NewClient(GetRedisConfig())

	statusDelete := redisClient.Del(ctx, fmt.Sprintf("%d", id))

	_, err = statusDelete.Result()

	if err != nil {
		return nil, err
	}

	statusCreate := redisClient.Set(ctx, fmt.Sprintf("%d", id), user, time.Minute*10)

	_, err = statusCreate.Result()

	if err != nil {
		return nil, err
	}

	return &user, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, pagination model.Pagination, filters *model.UserFilter) ([]*model.User, error) {
	db, err := repository.NewPostgresDB(repository.Config{
		Host:     os.Getenv("DB_HOST"),
		Port:     os.Getenv("DB_PORT"),
		Username: os.Getenv("DB_USERNAME"),
		Password: os.Getenv("DB_PASSWORD"),
		DBName:   os.Getenv("DB_NAME"),
		SSLMode:  os.Getenv("DB_SSLMODE"),
	})

	if err != nil {
		log.Fatal(err)
	}

	paginate := repository.NewPaginate(pagination.Limit, pagination.Page)

	var users []*model.User

	err = db.Scopes(repository.NewPaginate(paginate.Limit, paginate.Page).PaginatedResult).Where(filters).Find(&users).Error

	if err != nil {
		return nil, err
	}

	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

func GetRedisConfig() *redis.Options {
	return &redis.Options{
		Addr:     os.Getenv("REDIS_ADDR"),
		Password: os.Getenv("REDIS_PASSWORD"),
		DB:       0,
	}
}

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
